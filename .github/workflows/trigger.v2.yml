name: Trigger deploy Nogin API V2

on:
  workflow_dispatch:
    inputs:
      from-branch:
        description: 'Base branch to deploy (ex. dev)'
        required: true
        type: choice
        options:
          - dev-deploy
          - next
          - main

jobs:
  rebase-and-push:
    name: Rebase and Deploy
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Determine the target branch dynamically
      - name: Set Target Branch
        id: set-target-branch
        run: |
          case "${{ github.event.inputs.from-branch }}" in
            dev-deploy)
              echo "target-branch=master" >> $GITHUB_ENV
              ;;
            next)
              echo "target-branch=deploy-next" >> $GITHUB_ENV
              ;;
            main)
              echo "target-branch=deploy-main" >> $GITHUB_ENV
              ;;
            *)
              echo "Error: Unsupported from-branch value" >&2
              exit 1
              ;;
          esac

      # Perform the rebase process
      - name: Rebase and Push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.email "rjimenez@nogin.com"
          git config --global user.name "RoyJimenezValdez"
          git fetch origin

          # Identify the new commits added to the target branch
          echo "New commits being added to the target branch:"
            git checkout ${{ github.event.inputs.from-branch }}

            NEW_COMMITS=$(git log origin/${{ env.target-branch }}..HEAD --pretty=format:"%h - %s (%an)")
            echo "$NEW_COMMITS"

          git checkout ${{ env.target-branch }}
          git pull origin ${{ env.target-branch }}
          git fetch origin ${{ github.event.inputs.from-branch }}:${{ github.event.inputs.from-branch }}
          


          # Save new commits to environment variable
          echo "merged-commits=$NEW_COMMITS" >> $GITHUB_ENV

          # Rebase and handle conflicts
          git rebase ${{ github.event.inputs.from-branch }} || (
              echo "Rebase failed. Resolving conflicts automatically." &&
              git rebase --abort &&
              git merge --strategy=recursive -X theirs ${{ github.event.inputs.from-branch }} --allow-unrelated-histories
          )

          git push --force origin ${{ env.target-branch }}



      # Send merged commits to Slack
      - name: Notify Slack
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          if [ -n "${{ env.merged-commits }}" ]; then
            MESSAGE="*=== Triggering deploment for  ${{ env.target-branch }} ===* \n *Commits Merged into ${{ env.target-branch }}:* \n${{ env.merged-commits }}"
          else
            MESSAGE="No commits were merged into ${{ env.target-branch }}."
          fi

          curl -X POST -H 'Content-type: application/json' \
          --data "{\"text\": \"$MESSAGE\"}" \
          $SLACK_WEBHOOK_URL

      # Notify the action is complete
      - name: Complete
        run: echo "Rebase and deployment process completed successfully!"
