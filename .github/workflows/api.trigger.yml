name: Trigger deploy Nogin API V1

on:
  workflow_dispatch:
    inputs:
      from-branch:
        description: 'Base branch to deploy'
        required: true
        type: choice
        options:
          - dev-deploy
          - next
          - main

jobs:
  rebase-and-push:
    name: Rebase and Deploy
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Determine the target branch dynamically
      - name: Set Target Branch
        id: set-target-branch
        run: |
          case "${{ github.event.inputs.from-branch }}" in
            dev-deploy)
              echo "target-branch=master" >> $GITHUB_ENV
              ;;
            next)
              echo "target-branch=deploy-next" >> $GITHUB_ENV
              ;;
            main)
              echo "target-branch=deploy-main" >> $GITHUB_ENV
              ;;
            *)
              echo "Error: Unsupported from-branch value" >&2
              exit 1
              ;;
          esac

      # Perform the rebase process if the rebase fails because of history changes it will do a merge
      - name: Rebase and Push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.email "rjimenez@nogin.com"
          git config --global user.name "RoyJimenezValdez"
          git fetch origin
          git checkout ${{ env.target-branch }}
          git pull origin ${{ env.target-branch }}
          git fetch origin ${{ github.event.inputs.from-branch }}:${{ github.event.inputs.from-branch }}

          # Store the hash of the current HEAD of the target branch
          BASE_COMMIT=$(git rev-parse HEAD)

          # Rebase and handle conflicts
          git rebase origin/${{ github.event.inputs.from-branch }} || (
              echo "Rebase failed. Resolving conflicts automatically." &&
              git rebase --abort &&
              git merge --strategy=recursive -X theirs origin/${{ github.event.inputs.from-branch }} --allow-unrelated-histories
          )

          git push ${{ env.target-branch }}

          # Generate comparison link
          COMPARE_LINK="https://github.com/${{ github.repository }}/compare/$BASE_COMMIT...$(git rev-parse HEAD)"
          echo "Compare link: $COMPARE_LINK"
          echo "compare-link=$COMPARE_LINK" >> $GITHUB_ENV

          # Get current date and time
          CURRENT_DATETIME=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          echo "current-datetime=$CURRENT_DATETIME" >> $GITHUB_ENV

      # Send Slack notification
      - name: Notify Slack
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          COMPARE_LINK: ${{ env.compare-link }}
          CURRENT_DATETIME: ${{ env.current-datetime }}
        run: |
          TRIGGERED_BY=${{ github.actor }}
          MESSAGE="*=== Deployment Triggered ===*\n"
          MESSAGE+="*Date and Time:* $CURRENT_DATETIME\n"
          MESSAGE+="*Triggered by:* $TRIGGERED_BY\n"
          MESSAGE+="*Target Branch:* ${{ env.target-branch }}\n"
          MESSAGE+="*Source Branch:* ${{ github.event.inputs.from-branch }}\n"
          MESSAGE+="*Comparison Link:* <$COMPARE_LINK|Click here to see the changes>"

          curl -X POST -H 'Content-type: application/json' \
          --data "{\"text\": \"$MESSAGE\"}" \
          $SLACK_WEBHOOK_URL

      # Notify the action is complete
      - name: Complete
        run: echo "Rebase and deployment process completed successfully!"
